#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Parses the Makefile to echo what #defines are passed to the pre-processor at
compile time.  This is useful to see what modules are currently configured to
be turned on.  If you work with an IDE, you should be able to use the generated
config file to enable syntax highlighting for the macros.

Created on Sat Apr 30 14:59:35 2016

@author: ibackus
"""

def makeConfig(configname, makefile, verbose=True):
    
    macroText = parseMakefile(makefile)
    
    with open(configname, 'w') as f:

        f.write('// Automatically generated by get_define_flags.py\n')
        f.write('// Defines preprocessor macros for Qt Creator introspection\n')
        f.write(macroText)
        
        if verbose:
            
            print macroText

def preprocess(text):
    """
    Removes comments ('#') and handles continue line characters for makefile 
    text
    """
    lines = []
    previousLine = ''
    for line in text:
        
        # Join previous line (blank if there was no continue line)
        line = previousLine + line
        # ignore comments
        line = line.split('#')[0]
        # strip
        line = line.strip()
        if len(line) > 0:
            if line[-1] == '\\':
                previousLine = line[0:-1]
            else:
                previousLine = ''
                lines.append(line)
        else:
            previousLine = ''
    
    return lines
        

def parseMakefile(makefile='Makefile'):
    
    with open(makefile, 'r') as f:
        
        makefileText = f.readlines()
        
    makefileText = preprocess(makefileText)
    define_flags = findDefinition('DEFINE_FLAGS', makefileText)
    define_flags = replaceVariables(define_flags, makefileText)
    macros, values = getMacroDefs(define_flags)
    macroText = formatMacroDefs(macros, values)
    
    return macroText
    
def findDefinition(variable, text):
    
    searchString = variable + '='
    definition = ''
    
    for i, line in enumerate(text):
        
        l2 = line.replace(' ','')
        if l2[0:len(searchString)] == searchString:
            
            # Strip the variable= from the beginning of the definition
            definition = line.split('=', 1)[1]
            definition = definition.strip()
            break
    
    return definition
    
def getTagLocations(text):
    
    tagLocs = []
    
    i = 0
    
    while i < len(text) - 2:
        
        if text[i:i+2] == '$(':
            
            # found a tag
            tagStart = i
            i+=1
            
            tagEnd = None
            
            while (i < len(text)-1) and tagEnd is None:
                
                i += 1
                
                if text[i] == ')':
                    
                    tagEnd = i
            
            if tagEnd is None:
                
                raise RuntimeError, "Could not find closing parentheses"
                
            tagLocs.append([tagStart, tagEnd])
        
        i += 1
    
    return tagLocs
    
def replaceVariables(text, definitionText=''):
    
    tagLocs = getTagLocations(text)
    outList = []
    
    previousEnd = -1
    
    for tag in tagLocs:
        
        tagStart = tag[0]
        tagEnd = tag[1]
        
        # Add text outside of tag
        outList.append(text[previousEnd+1:tagStart])
        
        # Add tag text
        tagText = text[tagStart:tagEnd + 1]
        variable = tagText[2:-1]
        variableValue = findDefinition(variable, definitionText)
        outList.append(variableValue)
        
        previousEnd = tagEnd
        
    outList.append(text[tagEnd+1:]);
    
    outString = ''.join(outList)
    
    return outString

def getMacroDefs(text):
    
    textList = text.split()
    macros = []
    values = []
    
    for x in textList:
        
        if len(x) > 2:
            
            if x[0:2] == '-D':
                
                macro = x[2:]
                if '=' in macro:
                    
                    macro, value = macro.split('=')
                    
                else:
                    
                    value = ''
                    
                if macro not in macros:
                    
                    macros.append(macro)
                    values.append(value)
                
    return macros, values
    
def formatMacroDefs(macros, values):
    
    text = []
    for macro, value in zip(macros, values):
        
        line = '#define ' + macro + ' ' + value
        text.append(line)
    
    text = '\n'.join(text) + '\n'
    return text
        
if __name__ == "__main__":
    
    # Set up default filenames
    import os
    _directory = os.getcwd()
#    _directory = os.path.dirname(os.path.abspath(__file__))
    configname = os.path.join(_directory, 'ChaNGa.config')
    makefile = os.path.join(_directory, 'Makefile')
    
    makeConfig(configname, makefile)
    print "Saved compile-time #defines to " + configname
    
